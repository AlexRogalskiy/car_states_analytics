openapi: 3.0.1

info:
  title: Admin REST API
  version: 0.0.1

tags:
  - name: Tests
    description: The API provides methods for test.

paths:
  # *******************************************************************************
  #                           Tests
  # *******************************************************************************

  /api/admin/accounts/{accountId}/test:
    get:
      summary: test
      operationId: getTest
      tags:
        - Test
      parameters:
        - $ref: '#/components/parameters/accountId'
      responses:
        '200':
          description: List of Test objects.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TestItem'

  # *******************************************************************************
  #                           Accounts
  # *******************************************************************************

  /api/admin/v1/account:
    get:
      summary: get all accounts
      operationId: getAccounts
      tags:
        - Account
      responses:
        '200':
          description: List of accounts.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AccountResponse'

  /api/admin/v1/account/sign_up:
    post:
      summary: Register new account accounts
      operationId: singUp
      tags:
        - Account
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountRequest'
      responses:
        '200':
          description: Get specific accounts.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountResponse'

  /api/admin/v1/account/admin:
    post:
      summary: Register new admin account accounts
      operationId: createAdmin
      tags:
        - Account
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountRequest'
      responses:
        '200':
          description: Get specific accounts.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountResponse'

  /api/admin/v1/account/login:
    post:
      summary: Login to account
      operationId: login
      tags:
        - Account
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountRequest'
      responses:
        '200':
          description: Get specific accounts.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'

  /api/admin/v1/account/{accountId}:
    get:
      summary: get account
      operationId: getAccount
      tags:
        - Account
      parameters:
        - $ref: '#/components/parameters/accountId'
      responses:
        '200':
          description: Get specific accounts.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountResponse'

    delete:
      summary: delete account
      operationId: deleteAccount
      tags:
        - Account
      parameters:
        - $ref: '#/components/parameters/accountId'
      responses:
        '200':
          description: Ok.

    put:
      summary: Update account
      operationId: updateAccount
      tags:
        - Account
      parameters:
        - $ref: '#/components/parameters/accountId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountRequest'
      responses:
        '200':
          description: Get specific accounts.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountResponse'

  # *******************************************************************************
  #                           Cars
  # *******************************************************************************
  /api/admin/v1/cars:
    get:
      summary: get all cars
      operationId: getCars
      tags:
        - Car
      responses:
        '200':
          description: List of cars.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CarResponse'

    post:
      summary: add new cars
      operationId: addCars
      tags:
        - Car
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CarListRequest'
      responses:
        '200':
          description: Added car list.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CarResponse'

  /api/admin/v1/cars/{accountId}:
    get:
      summary: get cars by owner ID
      operationId: getCarsByOwnerId
      tags:
        - Car
      parameters:
        - $ref: '#/components/parameters/accountId'
      responses:
        '200':
          description: Get cars of concrete owner.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CarResponse'

  /api/admin/v1/car/{carId}:
    get:
      summary: get car by ID
      operationId: getCarById
      tags:
        - Car
      parameters:
        - $ref: '#/components/parameters/carId'
      responses:
        '200':
          description: Get car by ID.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CarResponse'

    delete:
      summary: delete car by ID
      operationId: deleteCarById
      tags:
        - Car
      parameters:
        - $ref: '#/components/parameters/carId'
      responses:
        '200':
          description: Delete car by ID.

  # *******************************************************************************
  #                           Parameters
  # *******************************************************************************
  /api/admin/v1/parameters:
    get:
      summary: get all parameters for cars
      operationId: getParams
      tags:
        - Parameter
      responses:
        '200':
          description: List of registered parameters.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CarParamMetaResponse'
    post:
      summary: Add new parameter
      operationId: addParam
      tags:
        - Parameter
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ParamRequest'
      responses:
        '200':
          description: Added param.
          content:
            application/json:
              schema:
                $ref: CarParamMetaResponse

  /api/admin/v1/parameters/{parameterId}:
    delete:
      summary: delete parameter by ID
      operationId: deleteParamById
      tags:
        - Parameter
      parameters:
        - $ref: '#/components/parameters/parameterId'
      responses:
        '200':
          description: Delete parameter by ID.


components:
  parameters:
    accountId:
      name: accountId
      in: path
      description: Account identifier
      required: true
      schema:
        type: string
        format: uuid

    carId:
      name: carId
      in: path
      description: Car identifier
      required: true
      schema:
        type: string
        format: uuid

    parameterId:
      name: parameterId
      in: path
      description: Parameter ID
      required: true
      schema:
        type: string
        format: uuid



  schemas:

    TestItem:
      type: object
      required:
        - id
        - values
      properties:
        id:
          type: string
          format: uuid
        values:
          type: array
          items:
            type: integer
            format: int64

    AccountRequest:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
        password:
          type: string

    AccountResponse:
      type: object
      required:
        - id
        - username
      properties:
        id:
          type: string
          format: uuid
        username:
          type: string
        created:
          type: string
          format: date-time
        updated:
          type: string
          format: date-time

    TokenResponse:
      type: object
      required:
        - accountId
        - token
        - username
        - authorities
      properties:
        accountId:
          type: string
          format: uuid
        token:
          type: string
        username:
          type: string
        authorities:
          type: array
          items:
            type: string

    CarListRequest:
      type: object
      required:
        - cars
      properties:
        cars:
          type: array
          items:
            type: CarRequest

    CarRequest:
      type: object
      required:
        - brand
        - model
        - owner_id
      properties:
        id:
          type: string
          format: uuid
        brand:
          type: string
        model:
          type: string
        owner_id:
          type: string
          format: uuid

    CarResponse:
      type: object
      required:
        - id
        - brand
        - model
        - owner
      properties:
        id:
          type: string
          format: uuid
        brand:
          type: string
        model:
          type: string
        owner:
          type: AccountResponse
        parameters:
          type: array
          items:
            type: CarParamResponse

    CarParamResponse:
      type: object
      properties:
        param_id:
          type: string
          format: uuid
        param_name:
          type: string
        param_type:
          type: integer
        value:
          type: string

    CarParamMetaResponse:
      type: object
      properties:
        param_id:
          type: string
          format: uuid
        param_name:
          type: string
        param_type:
          type: string

    ParamRequest:
      type: object
      required:
        - name
        - type
      properties:
        name:
          type: string
        type:
          type: integer


  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer

security:
  - bearerAuth: []